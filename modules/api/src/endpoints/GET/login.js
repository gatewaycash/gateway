/**
 * GET /login API endpoint
 * @author The Gateway Project Developers <hello@gateway.cash>
 * @file Defines a GET endpoint for /login
 */
import url from 'url'
import sha256 from 'sha256'
import { mysql, handleError, handleResponse } from 'utils'

export default async (req, res) => {
  console.log('GET /login requested')

  // parse the provided data
  const query = url.parse(req.url, true).query

  // ensure a password was sent
  if (!query.password) {
    return handleError(
      'No Password',
      'Provide a password when logging in',
      res
    )
  }

  // verify that either an address or a username was provided
  if (!query.address && !query.username && !query.XPUB) {
    return handleError(
      'Address, Username or XPUB Required',
      'Provide either an address, a username or an XPUB key when logging in',
      res
    )
  }

  // Variable to store the user record
  let user

  // search by address
  if (query.address) {
    let result = await mysql.query(
      `SELECT passwordHash, passwordSalt, tableIndex
        FROM users
        WHERE
          payoutAddress = ?
        LIMIT 1`,
      [query.address]
    )
    if (result.length !== 1) {
      return handleError(
        'Invalid Login',
        'An incorrect address was given',
        res
      )
    }
    user = result[0]
  }

  // search by username
  if (query.username && !user) {
    let result = await mysql.query(
      `SELECT passwordHash, passwordSalt, tableIndex
        FROM users
        WHERE
        username = ?
        LIMIT 1`,
      [query.username]
    )
    if (result.length !== 1) {
      return handleError(
        'Invalid Login',
        'An incorrect username was given',
        res
      )
    }
    user = result[0]
  }

  // search by XPUB
  if (query.XPUB && !user) {
    let result = await mysql.query(
      `SELECT passwordHash, passwordSalt, tableIndex
        FROM users
        WHERE
        payoutXPUB = ?
        LIMIT 1`,
      [query.XPUB]
    )
    if (result.length !== 1) {
      return handleError(
        'Invalid Login',
        'An incorrect XPUB key was given',
        res
      )
    }
    user = result[0]
  }

  // verify a user was found either way
  if (!user) {
    return handleError(
      'Login Error',
      'An unknown error is preventing you from logging in',
      res
    )
  }

  // verify the password
  const passwordHash = sha256(query.password + user.passwordSalt)
  if (user.passwordHash === passwordHash) {
    let response = await mysql.query(
      'SELECT APIKey FROM APIKeys WHERE userIndex = ? LIMIT 1',
      [user.tableIndex]
    )
    if (response.length !== 1) {
      /*
        since there were no API keys for this account but the user has just
        verified the credentials we can generate a new API key right now to
        avoid the error
      */
      let newKey = sha256(require('crypto').randomBytes(32))
      await mysql.query(
        `INSERT INTO APIKeys
          (userIndex, APIKey, label)
          VALUES
          (?, ?, "Generated by GET /login")`,
        [user.tableIndex, newKey]
      )
      return handleResponse({
        APIKey: newKey
      }, res)
    }
    return handleResponse({
      APIKey: response[0].APIKey
    }, res)
  } else {
    return handleError(
      'Invalid Login',
      'An incorrect password was given',
      res
    )
  }
}
