/**
 * Endpoint for /api/key
 * @author The Gateway Project Developers <hello@gateway.cash>
 * @file Defines API endpoints for /api/key
 */
import { mysql, auth, handleError, handleResponse, addAPIKey } from 'utils'

// PUT a new key in the database
let PUT = async (req, res) => {
  let userIndex = await auth(req.body.APIKey)
  if (!userIndex) return
  let newKey = await addAPIKey(
    userIndex,
    req.body.label || 'Generated by PUT /api/key',
    res
  )
  if (!newKey) return
  return handleResponse({
    newAPIKey: newKey
  }, res)
}

// DELETE endpoint to permanently remove unwanted keys
let DELETE = async (req, res) => {
  if (!req.body.APIKeyToPermanentlyDelete) {
    return handleError(
      'No Key Specified',
      'APIKeyToPermanentlyDelete must be a user account API key',
      res
    )
  }
  let userIndex = await auth(req.body.APIKey)
  if (!userIndex) return
  let result = await mysql.query(
    'DELETE FROM APIKeys WHERE APIKey = ? AND userIndex = ? LIMIT 1',
    [req.body.APIKeyToPermanentlyDelete, userIndex]
  )
  if (result.affectedRows !== 1) {
    return handleError(
      'No Such Key',
      'Either this key does not exist or this user does not own the key',
      res
    )
  }
  return handleResponse({}, res)
}

// PATCH endpoint for deactivating and reactivating keys
let PATCH = async (req, res) => {
  if (!req.body.action) {
    return handleError(
      'No Action Given',
      'An action needs to be specified (deactivate or reactivate)',
      res
    )
  }
  if (req.body.action !== 'deactivate' && req.body.action !== 'reactivate') {
    return handleError(
      'Invalid Action',
      'The action must either be deactivate or reactivate',
      res
    )
  }
  let userIndex = await auth(req.body.APIKey, res)
  if (!userIndex) return
  if (req.body.action === 'deactivate') {
    if (!req.body.APIKeyToDeactivate) {
      return handleError(
        'No Key Given',
        'No API key was provided for deactivation',
        res
      )
    }
    let result = await mysql.query(
      `UPDATE APIKeys
        SET active = 0,
        revokedDate = current_timestamp
        WHERE APIKey = ?
        AND userIndex = ?
        LIMIT 1`,
      [req.body.APIKeyToDeactivate, userIndex]
    )
    if (result.affectedRows !== 1) {
      return handleError(
        'No Such Key',
        'Either this key does not exist or this user does not own the key',
        res
      )
    }
    return handleResponse({}, res)
  } else {
    if (!req.body.APIKeyToReactivate) {
      return handleError(
        'No Key Given',
        'No API key was provided for reactivation',
        res
      )
    }
    let result = await mysql.query(
      `UPDATE APIKeys
        SET active = 1
        WHERE APIKey = ?
        AND userIndex = ?
        LIMIT 1`,
      [req.body.APIKeyToReactivate, userIndex]
    )
    if (result.affectedRows !== 1) {
      return handleError(
        'No Such Key',
        'Either this key does not exist or this user does not own the key',
        res
      )
    }
    return handleResponse({}, res)
  }
}

export default {
  PUT: PUT,
  DELETE: DELETE,
  PATCH: PATCH
}
