/**
 * GET /login API endpoint
 * @author The Gateway Project Developers <hello@gateway.cash>
 * @file Defines a GET endpoint for /login
 */
import sha256 from 'sha256'
import { mysql, handleError, handleResponse, addAPIKey } from 'utils'

let GET = async (req, res) => {
  // ensure a username and password were sent
  if (!req.body.password || !req.body.username) {
    return handleError(
      'No Username or Password',
      'A username and password are required when logging in',
      res
    )
  }

  // query the database
  let user = await mysql.query(
    `SELECT passwordHash, passwordSalt, tableIndex
        FROM users
        WHERE
        username = ?
        LIMIT 1`,
    [req.body.username]
  )

  // error if no user was found
  if (user.length !== 1) {
    return handleError(
      'Invalid Login',
      'An incorrect username or password was given',
      res
    )
  }
  user = user[0]

  // verify the password
  const passwordHash = sha256(req.body.password + user.passwordSalt)
  if (user.passwordHash === passwordHash) {
    // find a suitable API key
    let response = await mysql.query(
      'SELECT APIKey FROM APIKeys WHERE userIndex = ? AND active = 1 LIMIT 1',
      [user.tableIndex]
    )
    if (response.length !== 1) {
      /*
        since there were no API keys for this account but the user has just
        verified the credentials we can generate a new API key right now to
        avoid an error response
      */
      let newKey = await addAPIKey(
        user.tableIndex,
        'Generated by /login',
        res
      )

      // send the newly generated key
      return handleResponse({
        APIKey: newKey
      }, res)
    }

    // send the API key that was discovered in the database
    return handleResponse({
      APIKey: response[0].APIKey
    }, res)

  // if the password did not match
  } else {
    return handleError(
      'Invalid Login',
      'An incorrect username or password was given',
      res
    )
  }
}

export default {
  GET: GET
}
